version: "3.1"

volumes:
  prometheus_data: {}
  grafana_data: {}
  nifi_data: {}

services:
  nifi:
    container_name: nifi
    hostname: nifi
    image: apache/nifi:latest
    user: root
    restart: unless-stopped
    networks:
      - desafio-bb
    ports:
      - "8443:8443"
    environment:
      - SINGLE_USER_CREDENTIALS_USERNAME=admin
      - SINGLE_USER_CREDENTIALS_PASSWORD=desafioBB2023
      - TZ=America/Sao_Paulo
    volumes:
      - nifi_data:/opt/nifi
      
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:latest
    networks:
      - desafio-bb
    restart: always
    ports:
      - "2182:2181"
    environment:
      - ZOO_MY_ID=1
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - TZ=America/Sao_Paulo

  kafka:
    container_name: kafka
    hostname: kafka
    build: ./kafka
    networks:
      - desafio-bb
    depends_on:
      - zookeeper
    ports:
      - "9093:9092"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:29094,PLAINTEXT_HOST://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29094,PLAINTEXT_HOST://localhost:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
#      - KAFKA_OPTS=-javaagent:/usr/app/jmx_prometheus_javaagent.jar=7071:/usr/app/prom-jmx-agent-config.yml

      - TZ=America/Sao_Paulo

#  init-kafka:
#    container_name: init-kafka
#    hostname: init-kafka
#    image: confluentinc/cp-kafka:latest
#    networks:
#      - desafio-bb
#    depends_on:
#      - kafka
#    environment:
#      - TZ=America/Sao_Paulo
#    entrypoint: [ '/bin/sh', '-c' ]
#    command: |
#      "
#      # blocks until kafka is reachable
#      echo -e 'Creating kafka topics if not exists'
#      kafka-topics --bootstrap-server kafka:29094 --create --if-not-exists --topic fligths --replication-factor 1 --partitions 1
#
#      echo -e 'Successfully created the following topics:'
#      kafka-topics --bootstrap-server kafka:29094 --list
#      "

  cadvisor:
    container_name: cadvisor
    hostname: cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8080:8080"
    networks:
      - desafio-bb
    restart: always
    deploy:
      mode: global

  prometheus:
    container_name: prometheus
    hostname: prometheus
    image: prom/prometheus:v2.36.2
    networks:
      - desafio-bb
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    links:
      - cadvisor:cadvisor
      - alert-manager:alert-manager
    depends_on:
      - cadvisor
    restart: always

  alert-manager:
    container_name: alert-manager
    hostname: alert-manager
    image: prom/alertmanager
    ports:
      - "9096:9096"
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - desafio-bb
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  node-exporter:
    container_name: node-exporter
    hostname: node-exporter
    image: quay.io/prometheus/node-exporter:v1.5.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#      - /:/host:ro,rslave
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - "9100:9100"
    networks:
      - desafio-bb
    restart: always
    deploy:
      mode: global

  grafana:
    container_name: grafana
    hostname: grafana
    image: grafana/grafana
    depends_on:
      - prometheus
    environment:
      - TZ=America/Sao_Paulo
    networks:
      - desafio-bb
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    restart: always
 
  elastic-search:
    container_name: elastic-search
    hostname: elastic-search
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    restart: 'always'
    networks:
      - desafio-bb
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - TZ=America/Sao_Paulo
      - "ES_JAVA_OPTS=-Xms750m -Xmx750m"

# A SER ANALISADO EM TEMPO FUTURO
#  es_exporter:
#    restart: 'always'
#    ports:
#      - '9108:9108'
#    image: justwatch/elasticsearch_exporter
#    container_name: es-exporter-container
#    command:
#      - '-es.uri=http://elasticsearch-service:9200'
#    depends_on:
#      - elastic-search
#    networks:
#      - desafio-bb

networks:
  desafio-bb:
    driver: bridge
